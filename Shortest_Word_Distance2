//TimeComplexity.   O(p+q)
//Spacecomplexity.  O(n)


class WordDistance {
    
    HashMap<String, List<Integer>> map;
    public WordDistance(String[] wordsDict) {
       
        map = new HashMap<>();
        
        for(int i = 0 ; i < wordsDict.length; i++){
            
            if(!map.containsKey(wordsDict[i])){
                map.put(wordsDict[i], new ArrayList<>());
            }
            
            map.get(wordsDict[i]).add(i);
        }
    }
    
    public int shortest(String word1, String word2) {
        
        List<Integer> list1 = map.get(word1);
        List<Integer> list2 = map.get(word2);
        
        int p1 = 0;
        int p2 = 0;
        int min = Integer.MAX_VALUE;
        while(p1 < list1.size() && p2 < list2.size()){
            min = Math.min(min, Math.abs(list1.get(p1)-list2.get(p2)));
            if(list1.get(p1) < list2.get(p2)){
                p1++;
            }else{
                p2++;
            }
        }
        return min;
    }
}
